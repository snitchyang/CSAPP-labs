#######################################################################
# Test for copying block of size 1;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $1, %rdx		# src and dst have 1 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
# 杨征 521021910478
# I use an loop unrolling here to optimize the baseline code. 
# The baseline code is a loop, and the loop body is to copy one word from src to dst.
# I unroll the loop to copy two words each time
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Translate the c code in ncopy.c to Y86 assembly code
	# Loop header
	irmovq $0, %r8      # count1 = 0;
	irmovq $0, %r9		# count2 = 0;
	irmovq $0, %rcx		# count3 = 0;
	irmovq $0, %rax		# count = 0;
	# enter the loop if len >= 3, not modify the %rdx
	irmovq $3, %r10
	rrmovq %rdx, %r11
	subq %r10, %r11
	jl Check		# if not, goto Check

# iaddq added to add an immediate value to a register
Loop:	
	irmovq $3, %r10
	subq %r10, %rdx		# len -= 3
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos1:
	iaddq $1, %r8		# count1++
Npos1:	
	mrmovq 8(%rdi), %r10	# read val from src[1]...
	rmmovq %r10, 8(%rsi)	# ...and store it to dst[1]
	andq %r10, %r10		# val <= 0?
	jle Npos2		# if so, goto Npos2:
	iaddq $1, %r9      # count2++
Npos2:
	mrmovq 16(%rdi), %r10	# read val from src[1]...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst[1]
	andq %r10, %r10		# val <= 0?
	jle Npos3		# if so, goto Npos3:
	iaddq $1, %rcx      # count3++
Npos3:
	iaddq $24, %rdi		# src+=3
	iaddq $24, %rsi		# dst+=3
	# judge whether len >= 3, jump if len >= 3
	irmovq $3, %r10
	rrmovq %rdx, %r11
	subq %r10, %r11
	jge Loop		# if so, goto Loop

Check:
	# Do another step of copying if len >= 1
	andq %rdx, %rdx
	jle Final
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos3		# if so, goto Npos:
	iaddq $1, %rcx 		# count1++
Npos3:
	irmovq $1, %r10
	subq %r10, %rdx		# len--
	iaddq $8, %rdi		# src++
	iaddq $8, %rsi		# dst++
	jmp Check
Final:
	addq %r9, %rax
	addq %r8, %rax 		
	addq %rcx, %rax
	rrmovq %rax, %r11
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 0.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $0,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $1,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
