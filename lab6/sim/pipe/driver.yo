                            | #######################################################################
                            | # Test for copying block of size 1;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a803000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20100000000000000 | 	irmovq $1, %rdx		# src and dst have 1 elements
0x014: 30f61803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 809201000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | # 杨征 521021910478
                            | # I use an loop unrolling here to optimize the baseline code. 
                            | # The baseline code is a loop, and the loop body is to copy one word from src to dst.
                            | # I unroll the loop to copy two words each time
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Translate the c code in ncopy.c to Y86 assembly code
                            | 	# Loop header
0x03b: 30f80000000000000000 | 	irmovq $0, %r8      # count1 = 0;
0x045: 30f90000000000000000 | 	irmovq $0, %r9		# count2 = 0;
0x04f: 30f10000000000000000 | 	irmovq $0, %rcx		# count3 = 0;
0x059: 30f00000000000000000 | 	irmovq $0, %rax		# count = 0;
                            | 	# enter the loop if len >= 3, not modify the %rdx
0x063: 30fa0300000000000000 | 	irmovq $3, %r10
0x06d: 202b                 | 	rrmovq %rdx, %r11
0x06f: 61ab                 | 	subq %r10, %r11
0x071: 722c01000000000000   | 	jl Check		# if not, goto Check
                            | 
                            | # iaddq added to add an immediate value to a register
0x07a:                      | Loop:	
0x07a: 30fa0300000000000000 | 	irmovq $3, %r10
0x084: 61a2                 | 	subq %r10, %rdx		# len -= 3
0x086: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x090: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x09a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x09c: 71af00000000000000   | 	jle Npos1		# if so, goto Npos1:
0x0a5: c0f80100000000000000 | 	iaddq $1, %r8		# count1++
0x0af:                      | Npos1:	
0x0af: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src[1]...
0x0b9: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst[1]
0x0c3: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0c5: 71d800000000000000   | 	jle Npos2		# if so, goto Npos2:
0x0ce: c0f90100000000000000 | 	iaddq $1, %r9      # count2++
0x0d8:                      | Npos2:
0x0d8: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src[1]...
0x0e2: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst[1]
0x0ec: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0ee: 710101000000000000   | 	jle Npos3		# if so, goto Npos3:
0x0f7: c0f10100000000000000 | 	iaddq $1, %rcx      # count3++
0x101:                      | Npos3:
0x101: c0f71800000000000000 | 	iaddq $24, %rdi		# src+=3
0x10b: c0f61800000000000000 | 	iaddq $24, %rsi		# dst+=3
                            | 	# judge whether len >= 3, jump if len >= 3
0x115: 30fa0300000000000000 | 	irmovq $3, %r10
0x11f: 202b                 | 	rrmovq %rdx, %r11
0x121: 61ab                 | 	subq %r10, %r11
0x123: 757a00000000000000   | 	jge Loop		# if so, goto Loop
                            | 
0x12c:                      | Check:
                            | 	# Do another step of copying if len >= 1
0x12c: 6222                 | 	andq %rdx, %rdx
0x12e: 718901000000000000   | 	jle Final
0x137: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x141: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x14b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x14d: 710101000000000000   | 	jle Npos3		# if so, goto Npos:
0x156: c0f10100000000000000 | 	iaddq $1, %rcx 		# count1++
0x160:                      | Npos3:
0x160: 30fa0100000000000000 | 	irmovq $1, %r10
0x16a: 61a2                 | 	subq %r10, %rdx		# len--
0x16c: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x176: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x180: 702c01000000000000   | 	jmp Check
0x189:                      | Final:
0x189: 6090                 | 	addq %r9, %rax
0x18b: 6080                 | 	addq %r8, %rax 		
0x18d: 6010                 | 	addq %rcx, %rax
0x18f: 200b                 | 	rrmovq %rax, %r11
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x191:                      | Done:
0x191: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x192:                      | End:
                            | #/* $end ncopy-ys */
0x192:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x192:                      | check:
                            | 	# Return value test
0x192: 30fa0000000000000000 | 	irmovq $0,%r10
0x19c: 61a0                 | 	subq %r10,%rax
0x19e: 73ba01000000000000   | 	je checkb
0x1a7: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x1b1: 70f802000000000000   | 	jmp cdone
0x1ba:                      | checkb:
                            | 	# Code length check
0x1ba: 30f09201000000000000 | 	irmovq EndFun,%rax
0x1c4: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x1ce: 6120                 | 	subq %rdx,%rax
0x1d0: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x1da: 6102                 | 	subq %rax,%rdx
0x1dc: 75f801000000000000   | 	jge checkm
0x1e5: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x1ef: 70f802000000000000   | 	jmp cdone
0x1f8:                      | checkm:
0x1f8: 30f21803000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x202: 30f30003000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x20c: 30f70100000000000000 | 	irmovq $1,%rdi  # Count
0x216: 6277                 | 	andq %rdi,%rdi
0x218: 737602000000000000   | 	je checkpre         # Skip check if count = 0
0x221:                      | mcloop:
0x221: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x22b: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x235: 6160                 | 	subq %rsi,%rax
0x237: 735302000000000000   | 	je  mok
0x240: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x24a: 70f802000000000000   | 	jmp cdone
0x253:                      | mok:
0x253: 30f00800000000000000 | 	irmovq $8,%rax
0x25d: 6002                 | 	addq %rax,%rdx	  # dest ++
0x25f: 6003                 | 	addq %rax,%rbx    # src++
0x261: 30f00100000000000000 | 	irmovq $1,%rax
0x26b: 6107                 | 	subq %rax,%rdi    # cnt--
0x26d: 762102000000000000   | 	jg mcloop
0x276:                      | checkpre:
                            | 	# Check for corruption
0x276: 30f21003000000000000 | 	irmovq Predest,%rdx
0x280: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x28a: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x294: 6120                 | 	subq %rdx,%rax
0x296: 73b202000000000000   | 	je checkpost
0x29f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x2a9: 70f802000000000000   | 	jmp cdone
0x2b2:                      | checkpost:
                            | 	# Check for corruption
0x2b2: 30f22003000000000000 | 	irmovq Postdest,%rdx
0x2bc: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x2c6: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x2d0: 6120                 | 	subq %rdx,%rax
0x2d2: 73ee02000000000000   | 	je checkok
0x2db: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x2e5: 70f802000000000000   | 	jmp cdone
0x2ee:                      | checkok:
                            | 	# Successful checks
0x2ee: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x2f8:                      | cdone:
0x2f8: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x300:                      | 	.align 8
0x300:                      | src:
0x300: ffffffffffffffff     | 	.quad -1
0x308: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x310:                      | 	.align 16
0x310:                      | Predest:
0x310: fadebc0000000000     | 	.quad 0xbcdefa
0x318:                      | dest:
0x318: abefcd0000000000     | 	.quad 0xcdefab
0x320:                      | Postdest:
0x320: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x328:                      | .align 8
                            | # Run time stack
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
                            | 
0x3a8:                      | Stack:
